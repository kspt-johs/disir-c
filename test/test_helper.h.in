#ifndef _LIBDISIR_TEST_HELPER_H
#define _LIBDISIR_TEST_HELPER_H

#include <gtest/gtest.h>

extern "C" {
#include "log.h"
}

#include <disir/disir.h>
#include <disir/context.h>

// XXX: REmove me when/if we get the mold form config from API instead of stealing it from config
extern "C" {
#include "config.h"
}

#define CMAKE_BUILD_DIRECTORY "@CMAKE_BINARY_DIR@"
#define CMAKE_SOURCE_DIRECTORY "@CMAKE_SOURCE_DIR@"
#define CMAKE_PROJECT_SOURCE_DIR "@PROJECT_SOURCE_DIR@"
#define CMAKE_CURRENT_SOURCE_DIR "@CMAKE_CURRENT_SOURCE_DIR@"

#define ASSERT_STATUS(a,b)                                                  \
    {                                                                       \
        if (a != b)                                                         \
        {                                                                   \
            _log_disir_level (DISIR_LOG_LEVEL_TEST,                         \
                              "STATUS ASSERT FAILED %s vs %s (%s:%d)",      \
                              disir_status_string (a),                      \
                              disir_status_string (b),                      \
                              __FUNCTION__, __LINE__                        \
                             );                                             \
            FAIL() << "Asserted status '"                                   \
                   << disir_status_string (a)                               \
                   << " (" << a << ")'"                                     \
                   << ", got '"                                             \
                   << disir_status_string (b)                               \
                   << " (" << b << ")'";                                    \
        }                                                                   \
    }

#define EXPECT_STATUS(a,b)                                                  \
    {                                                                       \
        if (a != b)                                                         \
        {                                                                   \
            _log_disir_level (DISIR_LOG_LEVEL_TEST,                         \
                              "STATUS ASSERT FAILED %s vs %s (%s:%d)",      \
                              disir_status_string (a),                      \
                              disir_status_string (b),                      \
                              __FUNCTION__, __LINE__                        \
                             );                                             \
            ADD_FAILURE() << "Expected status '"                            \
                   << disir_status_string (a)                               \
                   << " (" << a << ")'"                                     \
                   << ", got '"                                             \
                   << disir_status_string (b)                               \
                   << " (" << b << ")'";                                    \
        }                                                                   \
    }


#define ASSERT_NO_SETUP_FAILURE()                                           \
    {                                                                       \
        if (HasFatalFailure()) return;                                      \
    }

namespace testing
{
    class DisirTestWrapper : public testing::Test
    {
    protected:
        void DisirLogCurrentTest (const char *prefix);

        void DisirLogCurrentTestEnter ();

        void DisirLogCurrentTestExit ();

        void DisirLogTestBodyEnter ();
        void DisirLogTestBodyExit ();
    };

    class DisirTestTestPlugin : public DisirTestWrapper
    {
    public:

        static void SetUpTestCase ();
        static void TearDownTestCase ();

        void SetUp ()
        {
            DisirLogCurrentTestEnter ();
        }

        void TearDown ()
        {
            DisirLogCurrentTestExit ();
        }

    public:
        static struct disir_instance   *instance;
        static struct disir_mold    *libdisir_mold;
        static struct disir_config  *libdisir_config;

        enum disir_status status;
    };
}

#endif // _LIBDISIR_TEST_HELPER_H

